axis.ticks = element_blank(),
panel.background = element_blank())
# Passo 11: Gerando o mapa 3D da pobreza em SC (não feche a janela pop-up que
# foi aberta até completar esse script até o final)
plot_gg(ggobj = mapa_pobreza,
width = 11,
height = 6,
scale = 300,
multicore = TRUE,
windowsize = c(1000, 800))
# Passo 11: Gerando o mapa 3D da pobreza em SC (não feche a janela pop-up que
# foi aberta até completar esse script até o final)
plot_gg(ggobj = mapa_pobreza,
width = 11,
height = 6,
scale = 300,
multicore = TRUE,
windowsize = c(1000, 800))
# Passo 7: Capturando as coordenadas dos centroides de cada município de SC num
# data frame:
coordinates(shp_sc) %>%
data.frame() %>%
rename(longitude = 1,
latitude = 2) %>%
mutate(CD_GEOCMU = shp_sc@data$CD_GEOCMU) %>%
dplyr::select(latitude, everything()) -> coords_sc
# Passo 8: Adicionando as coordenadas dos municípios do Centro-Oeste no objeto
# map_data_centro_oeste
shp_sc_df <- shp_sc_df %>%
left_join(coords_sc, by = "CD_GEOCMU")
# Passo 9: Georreferenciando a imagem PNG e plotando marcações sobre a pobreza
# em SC nos centroides de cada polígono
shp_sc_df %>%
ggplot() +
annotation_custom(
rasterGrob(background_mapa,
width=unit(1,"npc"),
height=unit(1,"npc")),-Inf, Inf, -Inf, Inf) +
xlim(xlim[1],xlim[2]) + # x-axis Mapping
ylim(ylim[1],ylim[2]) + # y-axis Mapping
geom_point(aes(x = longitude, y = latitude, color = poverty), size = 1.5) +
scale_colour_gradient(name = "Poverty",
limits = range(shp_sc_df$poverty),
low = "#FCB9B2",
high = "#B23A48") +
theme(axis.line = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
# Passo 9: Georreferenciando a imagem PNG e plotando marcações sobre a pobreza
# em SC nos centroides de cada polígono
shp_sc_df %>%
ggplot() +
annotation_custom(
rasterGrob(background_mapa,
width=unit(1,"npc"),
height=unit(1,"npc")),-Inf, Inf, -Inf, Inf) +
xlim(xlim[1],xlim[2]) + # x-axis Mapping
ylim(ylim[1],ylim[2]) + # y-axis Mapping
geom_point(aes(x = longitude, y = latitude, color = poverty), size = 1.5) +
scale_colour_gradient(name = "Poverty",
limits = range(shp_sc_df$poverty),
low = "#FCB9B2",
high = "#B23A48") +
theme(axis.line = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
# Passo 7: Capturando as coordenadas dos centroides de cada município de SC num
# data frame:
coordinates(shp_sc) %>%
data.frame() %>%
rename(longitude = 1,
latitude = 2) %>%
mutate(CD_GEOCMU = shp_sc@data$CD_GEOCMU) %>%
select(latitude, everything()) -> coords_sc
# Passo 8: Adicionando as coordenadas dos municípios do Centro-Oeste no objeto
# map_data_centro_oeste
shp_sc_df <- shp_sc_df %>%
left_join(coords_sc, by = "CD_GEOCMU")
# Passo 9: Georreferenciando a imagem PNG e plotando marcações sobre a pobreza
# em SC nos centroides de cada polígono
shp_sc_df %>%
ggplot() +
annotation_custom(
rasterGrob(background_mapa,
width=unit(1,"npc"),
height=unit(1,"npc")),-Inf, Inf, -Inf, Inf) +
xlim(xlim[1],xlim[2]) + # x-axis Mapping
ylim(ylim[1],ylim[2]) + # y-axis Mapping
geom_point(aes(x = longitude, y = latitude, color = poverty), size = 1.5) +
scale_colour_gradient(name = "Poverty",
limits = range(shp_sc_df$poverty),
low = "#FCB9B2",
high = "#B23A48") +
theme(axis.line = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
# Passo 10: Salvando o resultado do Passo 9 num objeto
mapa_pobreza <- shp_sc_df %>%
ggplot() +
annotation_custom(
rasterGrob(background_mapa,
width=unit(1,"npc"),
height=unit(1,"npc")),-Inf, Inf, -Inf, Inf) +
xlim(xlim[1],xlim[2]) + # x-axis Mapping
ylim(ylim[1],ylim[2]) + # y-axis Mapping
geom_point(aes(x = longitude, y = latitude, color = poverty), size = 1.5) +
scale_colour_gradient(name = "Poverty",
limits = range(shp_sc_df$poverty),
low = "#FCB9B2",
high = "#B23A48") +
theme(axis.line = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
# Passo 11: Gerando o mapa 3D da pobreza em SC (não feche a janela pop-up que
# foi aberta até completar esse script até o final)
plot_gg(ggobj = mapa_pobreza,
width = 11,
height = 6,
scale = 300,
multicore = TRUE,
windowsize = c(1000, 800))
# Passo 12: Melhorando o resultado do Passo 11:
render_camera(fov = 70,
zoom = 0.5,
theta = 130,
phi = 35)
mapa_pobreza
# Passo 11: Gerando o mapa 3D da pobreza em SC (não feche a janela pop-up que
# foi aberta até completar esse script até o final)
plot_gg(ggobj = mapa_pobreza,
width = 11,
height = 6,
scale = 300,
multicore = TRUE,
windowsize = c(1000, 800))
# Passo 11: Gerando o mapa 3D da pobreza em SC (não feche a janela pop-up que
# foi aberta até completar esse script até o final)
plot_gg(ggobj = mapa_pobreza,
width = 11,
height = 6,
scale = 300,
multicore = TRUE,
windowsize = c(1000, 800))
# Passo 11: Gerando o mapa 3D da pobreza em SC (não feche a janela pop-up que
# foi aberta até completar esse script até o final)
plot_gg(ggobj = mapa_pobreza,
width = 11,
height = 6,
scale = 300,
multicore = TRUE,
windowsize = c(1000, 800))
# Carregando os dados de alguns terremotos na Oceania:
data(quakes)
# Observando os dados do objeto quakes:
quakes %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Aplicando a função class():
class(quakes)
# Transformando o data frame quakes num objeto sf:
sf_terremotos <- st_as_sf(x = quakes,
coords = c("long", "lat"),
crs = 4326)
# Transformando o data frame quakes num objeto sf:
sf_terremotos <- st_as_sf(x = quakes,
coords = c("long", "lat"),
crs = 4326)
library(sf)
# Transformando o data frame quakes num objeto sf:
sf_terremotos <- st_as_sf(x = quakes,
coords = c("long", "lat"),
crs = 4326)
# Observando os dados do objeto sf_terremotos:
sf_terremotos %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Visualizando o objeto sf_terremotos de forma espacial:
tm_shape(sf_terremotos) +
tm_dots(size = 0.5, alpha = 0.3)
# Gerando gráficos estratificados pela profundidade do terremoto -
# estratificação por tamanho:
tm_shape(shp = sf_terremotos) +
tm_bubbles(size = "depth",
scale = 1,
shape = 19,
alpha = 0.3,
title.size = "Profundidade dos Terremotos") +
tm_compass() +
tm_layout(legend.outside = TRUE,
legend.text.size = 3)
# Visualizando o objeto sf_terremotos de forma espacial:
tm_shape(sf_terremotos) +
tm_dots(size = 0.5, alpha = 0.3)
# Gerando gráficos estratificados pela profundidade do terremoto -
# estratificação por tamanho:
tm_shape(shp = sf_terremotos) +
tm_bubbles(size = "depth",
scale = 1,
shape = 19,
alpha = 0.3,
title.size = "Profundidade dos Terremotos") +
tm_compass() +
tm_layout(legend.outside = TRUE,
legend.text.size = 3)
# Gerando gráficos estratificados pela profundidade do terremoto -
# estratificação por cor:
tm_shape(shp = sf_terremotos) +
tm_dots(col = "depth",
shape = 19,
alpha = 0.5,
size = 0.6,
palette = "viridis",
title = "Profundidade dos Terremotos") +
tm_compass() +
tm_layout(legend.outside = TRUE,
legend.text.size = 3)
# Como gerar plotar dois gráficos na aba Plots, simultaneamente, com o tmap:
grid.newpage()
# Passo 1: Salvar em um objeto o primeiro gráfico de interesse:
plot_01 <- tm_shape(shp = sf_terremotos) +
tm_bubbles(size = "depth",
scale = 1,
shape = 19,
alpha = 0.3,
title.size = "Profundidade dos Terremotos") +
tm_compass() +
tm_layout(legend.outside = TRUE)
# Passo 2: Salvar em um objeto o segundo gráfico de interesse:
plot_02 <- tm_shape(shp = sf_terremotos) +
tm_dots(col = "depth",
shape = 19,
alpha = 0.5,
size = 0.6,
palette = "viridis",
title = "Profundidade dos Terremotos") +
tm_compass() +
tm_layout(legend.outside = TRUE)
# Passo 3: Preparar o ambiente gráfico do R para receber gráficos de forma
# simultânea:
pushViewport(
viewport(
layout = grid.layout(1,2)
)
)
# Passo 4: Executar as plotagens
print(plot_01, vp = viewport(layout.pos.col = 1, height = 5))
print(plot_02, vp = viewport(layout.pos.col = 2, height = 5))
# Estabelecendo cutoffs
tmap_mode("view")
sf_terremotos %>%
filter(mag >= 6) %>%
tm_shape() +
tm_dots(col = "depth",
shape = 19,
alpha = 0.5,
size = 0.2,
#palette = "-plasma",
title = "Profundidade dos Terremotos")
pacotes <- c("plotly","rgdal","raster","tmap","maptools","sf","rgeos","sp",
"adehabitatHR","tidyverse","broom","knitr","kableExtra","gridExtra",
"RColorBrewer","profvis","png","grid","magick","rgl","devtools",
"GISTools")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# O pacote rayshader que está no CRAN, no momento, possui alguns bugs. A versão
# que está no GitHub do autor do pacote já é mais funcional. Para instalá-la:
devtools::install_github("tylermorganwall/rayshader")
# Para carregar o rayshader
library(rayshader)
# Carregando dados sobre a pobreza em SC:
load("dados_sc.RData")
# Observando a base de dados dados_sc:
dados_sc %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
summary(dados_sc) # Note que há missing values
# Passo 1: Transformando o objeto shp_sc num data frame:
shp_sc_df <- tidy(shp_sc, region = "CD_GEOCMU") %>%
rename(CD_GEOCMU = id)
# Passo 2: Juntando as informações da base de dados dados_sc ao objeto
# shp_sc_df:
shp_sc_df <- shp_sc_df %>%
left_join(dados_sc, by = "CD_GEOCMU")
# Passo 3: Gerando um mapa no ggplot2
shp_sc_df %>%
ggplot(aes(x = long,
y = lat,
group = group,
fill = poverty)) +
geom_polygon() +
scale_fill_gradient(limits = range(shp_sc_df$poverty),
low = "#FFF3B0",
high="#E09F3E") +
layer(geom = "path",
stat = "identity",
position = "identity",
mapping = aes(x = long,
y = lat,
group = group,
color = I('#FFFFFF'))) +
theme(legend.position = "none",
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
# Passo 4: Salvando o mapa gerado no Passo 3 num objeto:
mapa_sc <- shp_sc_df %>%
ggplot(aes(x = long,
y = lat,
group = group,
fill = poverty)) +
geom_polygon() +
scale_fill_gradient(limits = range(shp_sc_df$poverty),
low = "#FFF3B0",
high="#E09F3E") +
layer(geom = "path",
stat = "identity",
position = "identity",
mapping = aes(x = long,
y = lat,
group = group,
color = I('#FFFFFF'))) +
theme(legend.position = "none",
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
# Passo 1: Transformando o objeto shp_sc num data frame:
shp_sc_df <- tidy(shp_sc, region = "CD_GEOCMU") %>%
rename(CD_GEOCMU = id)
# Carregando um shapefile do Estado de Santa Catarina (SC):
shp_sc <- readOGR(dsn = "shapefile_sc",
layer = "sc_state")
# Visualizando o objeto shp_sc:
tm_shape(shp = shp_sc) +
tm_borders()
# Para quem não sabe onde fica o Estado de SC:
tmap_mode("view")
tm_shape(shp = shp_sc) +
tm_borders()
tmap_mode("plot")
summary(dados_sc) # Note que há missing values
# Passo 1: Transformando o objeto shp_sc num data frame:
shp_sc_df <- tidy(shp_sc, region = "CD_GEOCMU") %>%
rename(CD_GEOCMU = id)
# Passo 2: Juntando as informações da base de dados dados_sc ao objeto
# shp_sc_df:
shp_sc_df <- shp_sc_df %>%
left_join(dados_sc, by = "CD_GEOCMU")
# Passo 3: Gerando um mapa no ggplot2
shp_sc_df %>%
ggplot(aes(x = long,
y = lat,
group = group,
fill = poverty)) +
geom_polygon() +
scale_fill_gradient(limits = range(shp_sc_df$poverty),
low = "#FFF3B0",
high="#E09F3E") +
layer(geom = "path",
stat = "identity",
position = "identity",
mapping = aes(x = long,
y = lat,
group = group,
color = I('#FFFFFF'))) +
theme(legend.position = "none",
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
# Passo 4: Salvando o mapa gerado no Passo 3 num objeto:
mapa_sc <- shp_sc_df %>%
ggplot(aes(x = long,
y = lat,
group = group,
fill = poverty)) +
geom_polygon() +
scale_fill_gradient(limits = range(shp_sc_df$poverty),
low = "#FFF3B0",
high="#E09F3E") +
layer(geom = "path",
stat = "identity",
position = "identity",
mapping = aes(x = long,
y = lat,
group = group,
color = I('#FFFFFF'))) +
theme(legend.position = "none",
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
# Passo 5: Salvando o objeto mapa_sc como um arquivo de extensão *.png, com uma
# boa resolução:
xlim <- ggplot_build(mapa_sc)$layout$panel_scales_x[[1]]$range$range
ylim <- ggplot_build(mapa_sc)$layout$panel_scales_y[[1]]$range$range
ggsave(filename = "mapa_co_dsa.png",
width = diff(xlim) * 4,
height = diff(ylim) * 4,
units = "cm")
# Passo 6: Carregando o arquivo mapa_co_dsa.png:
background_mapa <- readPNG("mapa_co_dsa.png")
# Passo 7: Capturando as coordenadas dos centroides de cada município de SC num
# data frame:
coordinates(shp_sc) %>%
data.frame() %>%
rename(longitude = 1,
latitude = 2) %>%
mutate(CD_GEOCMU = shp_sc@data$CD_GEOCMU) %>%
select(latitude, everything()) -> coords_sc
# Passo 8: Adicionando as coordenadas dos municípios do Centro-Oeste no objeto
# map_data_centro_oeste
shp_sc_df <- shp_sc_df %>%
left_join(coords_sc, by = "CD_GEOCMU")
# Passo 9: Georreferenciando a imagem PNG e plotando marcações sobre a pobreza
# em SC nos centroides de cada polígono
shp_sc_df %>%
ggplot() +
annotation_custom(
rasterGrob(background_mapa,
width=unit(1,"npc"),
height=unit(1,"npc")),-Inf, Inf, -Inf, Inf) +
xlim(xlim[1],xlim[2]) + # x-axis Mapping
ylim(ylim[1],ylim[2]) + # y-axis Mapping
geom_point(aes(x = longitude, y = latitude, color = poverty), size = 1.5) +
scale_colour_gradient(name = "Poverty",
limits = range(shp_sc_df$poverty),
low = "#FCB9B2",
high = "#B23A48") +
theme(axis.line = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
# Passo 10: Salvando o resultado do Passo 9 num objeto
mapa_pobreza <- shp_sc_df %>%
ggplot() +
annotation_custom(
rasterGrob(background_mapa,
width=unit(1,"npc"),
height=unit(1,"npc")),-Inf, Inf, -Inf, Inf) +
xlim(xlim[1],xlim[2]) + # x-axis Mapping
ylim(ylim[1],ylim[2]) + # y-axis Mapping
geom_point(aes(x = longitude, y = latitude, color = poverty), size = 1.5) +
scale_colour_gradient(name = "Poverty",
limits = range(shp_sc_df$poverty),
low = "#FCB9B2",
high = "#B23A48") +
theme(axis.line = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
# Passo 11: Gerando o mapa 3D da pobreza em SC (não feche a janela pop-up que
# foi aberta até completar esse script até o final)
plot_gg(ggobj = mapa_pobreza,
width = 11,
height = 6,
scale = 300,
multicore = TRUE,
windowsize = c(1000, 800))
# Passo 12: Melhorando o resultado do Passo 11:
render_camera(fov = 70,
zoom = 0.5,
theta = 130,
phi = 35)
