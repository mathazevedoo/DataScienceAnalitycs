pacotes <- c("tidyverse","rgdal","spdep","knitr","kableExtra","tmap","gtools")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Carregando um shapefile:
shp_sp <- readOGR(dsn = "shapefile_sp", layer = "estado_sp")
# Visualizando o shapefile
plot(shp_sp)
# Estabelecendo vizinhanças por contiguidade, critério queen:
vizinhos_queen <- poly2nb(pl = shp_sp,
queen = TRUE,
row.names = shp_sp@data$NM_MUNICIP)
# Visualizando a vizinhança estabelecida:
plot(shp_sp, border = "lightgray")
# Informações relevantes sobre a vizinhança queen estabelecida:
summary(vizinhos_queen)
# Ok! Cadê a matriz W?
matrizW_queen <- nb2mat(neighbours = vizinhos_queen,
style = "B")
# Notaram o erro reportado pelo R? O erro diz, explicitamente, que há
# observações sem uma vizinhança definida. Noutras palavras, há a ocorrência de
# ilhas:
plot(shp_sp, border = "lightgray")
plot(vizinhos_queen,
coordinates(shp_sp),
add = TRUE,
col = "#33638DFF")
# No caso, a ilha diz respeito ao município de Ilhabela. Para contornar a
# situação, podemos utilizar o argumento zero.policy = TRUE.
matrizW_queen <- nb2mat(neighbours = vizinhos_queen,
style = "B",
zero.policy = TRUE)
# Para facilitar o estudo da nossa matriz W, podemos comandar:
colnames(matrizW_queen) <- shp_sp@data$NM_MUNICIP
View(matrizW_queen)
# Estabelecendo vizinhanças por contiguidade, critério rook:
vizinhos_rook <- poly2nb(pl = shp_sp,
queen = FALSE,
row.names = shp_sp@data$NM_MUNICIP)
# Visualizando a vizinhança estabelecida:
plot.new()
plot(shp_sp, border = "lightgray")
plot(vizinhos_rook,
coordinates(shp_sp),
add = TRUE,
col = "#95D840FF")
# Informações relevantes sobre a vizinhança rook estabelecida:
summary(vizinhos_rook)
# A matriz W pode ser extraída da seguinte forma:
matrizW_rook <- nb2mat(neighbours = vizinhos_rook,
style = "B",
zero.policy = TRUE)
# Carregando um shapefile:
shp_ba <- readOGR(dsn = "shapefile_ba",
layer = "ba_state",
encoding = "UTF-8",
use_iconv = TRUE)
# Carregando um shapefile:
shp_ba <- readOGR(dsn = "shapefile_ba",
layer = "ba_state",
encoding = "UTF-8",
use_iconv = TRUE)
# Carregando um shapefile:
shp_ba <- readOGR(dsn = "shapefile_ba",
layer = "ba_state",
encoding = "UTF-8",
use_iconv = TRUE)
# Estabelecendo vizinhanças por distâncias geográficas:
vizinhos_distancias <- dnearneigh(coordinates(shp_ba),
d1 = 0,
d2 = 90,
longlat = TRUE)
# Informações relevantes sobre a vizinhança estabelecida:
summary(vizinhos_distancias)
# Visualizando a vizinhança estabelecida:
plot.new()
plot(shp_ba, border = "lightgray")
plot(vizinhos_distancias,
coordinates(shp_ba),
add = TRUE,
col = "#CC6A70FF")
# A matriz W pode ser extraída da seguinte forma:
matrizW_distancias <- nb2mat(neighbours = vizinhos_distancias,
style = "B")
# Carregando um shapefile:
shp_sc <- readOGR(dsn = "shapefile_sc",
layer = "sc_state",
encoding = "UTF-8",
use_iconv = TRUE)
# Carregando um shapefile:
shp_sc <- readOGR(dsn = "shapefile_sc",
layer = "sc_state",
encoding = "UTF-8",
use_iconv = TRUE)
# Para a abordagem, o primeiro passo é a criação de um objeto do tipo lista
# que contenha os outputs da função knearneigh.
lista_knear <- knearneigh(coordinates(shp_sc),
longlat = TRUE,
k = 3)
# Depois, esse objeto do tipo lista pode ser transformado em um objeto que
# contenha as vizinhanças calculas:
vizinhos_knear <- knn2nb(knn = lista_knear)
# Informações relevantes sobre a vizinhança estabelecida:
vizinhos_knear
# Visualizando a vizinhança estabelecida:
plot.new()
plot(shp_sc, border = "lightgray")
plot(vizinhos_knear,
coordinates(shp_sc),
add = TRUE,
col = "#13306DFF")
# A matriz W pode ser extraída da seguinte forma:
matrizW_knear  <- nb2mat(neighbours = vizinhos_knear,
style = "B")
# Para o cálculo da Estatística I de Moran, nosso algoritmo esperará como
# declaração um objeto de classe listw. Como exemplificação, voltaremos a
# utilizar o objeto matrizW_queen:
listw_queen <- mat2listw(matrizW_queen)
class(listw_queen)
# Após isso, poderemos utilizar a função
moran.test(x = shp_sp@data$idh,
listw = listw_queen,
zero.policy = TRUE)
# 02) O Diagrama da Estatística I de Moran --------------------------------
moran.plot(x = shp_sp@data$idh,
listw = listw_queen,
zero.policy = TRUE,
xlab = "IDH",
ylab = "IDH Espacialmente Defasado",
pch = 19)
# Para o cálculo da Estatística I de Moran, nosso algoritmo esperará como
# declaração um objeto de classe listw. Como exemplificação, voltaremos a
# utilizar o objeto matrizW_queen:
listw_queen <- mat2listw(matrizW_queen)
class(listw_queen)
# Após isso, poderemos utilizar a função
moran.test(x = shp_sp@data$idh,
listw = listw_queen,
zero.policy = TRUE)
# Antes de dar prosseguimento aos estudos das autocorrelações espaciais sobre
# a variável IDH, vamos observar alguns comportamentos:
tm_shape(shp = shp_sp) +
tm_fill(col = "idh", style = "quantile", n = 5, palette = "-magma") +
tm_borders()
# Para o cálculo da Estatística I de Moran, nosso algoritmo esperará como
# declaração um objeto de classe listw. Como exemplificação, voltaremos a
# utilizar o objeto matrizW_queen:
listw_queen <- mat2listw(matrizW_queen)
class(listw_queen)
# Após isso, poderemos utilizar a função
moran.test(x = shp_sp@data$idh,
listw = listw_queen,
zero.policy = TRUE)
gc()
pacotes <- c("tidyverse","rgdal","spdep","knitr","kableExtra","tmap","gtools")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Estabelecendo Vizinhanças -----------------------------------------------
# 01) Vizinhanças por Contiguidade ----------------------------------------
# Carregando um shapefile:
shp_sp <- readOGR(dsn = "shapefile_sp", layer = "estado_sp")
# Visualizando o shapefile
plot(shp_sp)
# Estabelecendo vizinhanças por contiguidade, critério queen:
vizinhos_queen <- poly2nb(pl = shp_sp,
queen = TRUE,
row.names = shp_sp@data$NM_MUNICIP)
# Visualizando a vizinhança estabelecida:
plot(shp_sp, border = "lightgray")
plot(vizinhos_queen,
coordinates(shp_sp),
add = TRUE,
col = "#33638DFF")
# Informações relevantes sobre a vizinhança queen estabelecida:
summary(vizinhos_queen)
# Ok! Cadê a matriz W?
matrizW_queen <- nb2mat(neighbours = vizinhos_queen,
style = "B")
# Notaram o erro reportado pelo R? O erro diz, explicitamente, que há
# observações sem uma vizinhança definida. Noutras palavras, há a ocorrência de
# ilhas:
plot(shp_sp, border = "lightgray")
plot(vizinhos_queen,
coordinates(shp_sp),
add = TRUE,
col = "#33638DFF")
# No caso, a ilha diz respeito ao município de Ilhabela. Para contornar a
# situação, podemos utilizar o argumento zero.policy = TRUE.
matrizW_queen <- nb2mat(neighbours = vizinhos_queen,
style = "B",
zero.policy = TRUE)
# Para facilitar o estudo da nossa matriz W, podemos comandar:
colnames(matrizW_queen) <- shp_sp@data$NM_MUNICIP
View(matrizW_queen)
# E se a ideia fosse o estabelecimento de contiguidades de outras ordens?
vizinhos_queen_ordens <- nblag(neighbours = vizinhos_queen, maxlag = 5)
vizinhos_queen_ordens[[1]] #Contiguidades de ordem 1
vizinhos_queen_ordens[[2]] #Contiguidades de ordem 2
vizinhos_queen_ordens[[3]] #Contiguidades de ordem 3
vizinhos_queen_ordens[[4]] #Contiguidades de ordem 4
vizinhos_queen_ordens[[5]] #Contiguidades de ordem 5
# Exemplo de plotagem com ordens superiores de contiguidades:
plot(shp_sp, border = "lightgray")
plot(vizinhos_queen_ordens[[2]],
coordinates(shp_sp),
add = TRUE,
col = "#33638DFF")
# Estabelecendo vizinhanças por contiguidade, critério rook:
vizinhos_rook <- poly2nb(pl = shp_sp,
queen = FALSE,
row.names = shp_sp@data$NM_MUNICIP)
# Visualizando a vizinhança estabelecida:
plot.new()
plot(shp_sp, border = "lightgray")
plot(vizinhos_rook,
coordinates(shp_sp),
add = TRUE,
col = "#95D840FF")
# Informações relevantes sobre a vizinhança rook estabelecida:
summary(vizinhos_rook)
# A matriz W pode ser extraída da seguinte forma:
matrizW_rook <- nb2mat(neighbours = vizinhos_rook,
style = "B",
zero.policy = TRUE)
# Para facilitar o estudo da nossa matriz W, podemos comandar:
colnames(matrizW_rook) <- shp_sp@data$NM_MUNICIP
View(matrizW_rook)
# 02) Vizinhanças por Distância Geográfica ---------------------------------
# Carregando um shapefile:
shp_ba <- readOGR(dsn = "shapefile_ba",
layer = "ba_state",
encoding = "UTF-8",
use_iconv = TRUE)
# Estabelecendo vizinhanças por distâncias geográficas:
vizinhos_distancias <- dnearneigh(coordinates(shp_ba),
d1 = 0,
d2 = 90,
longlat = TRUE)
# Verificar com ?dnearneigh que por padrão, ao argumentar longlat = TRUE,
# as distâncias serão calculadas em km. Caso o objeto seja da classe sp, as
# unidades de medida consideradas serão aquelas presentes no CRS do objeto.
# Informações relevantes sobre a vizinhança estabelecida:
summary(vizinhos_distancias)
# Visualizando a vizinhança estabelecida:
plot.new()
plot(shp_ba, border = "lightgray")
plot(vizinhos_distancias,
coordinates(shp_ba),
add = TRUE,
col = "#CC6A70FF")
# A matriz W pode ser extraída da seguinte forma:
matrizW_distancias <- nb2mat(neighbours = vizinhos_distancias,
style = "B")
# Para facilitar o estudo da nossa matriz W, podemos comandar:
colnames(matrizW_distancias) <- shp_ba@data$MUNICIPIO
rownames(matrizW_distancias) <- shp_ba@data$MUNICIPIO
View(matrizW_distancias)
# 03) Vizinhanças Ponderadas por k-Nearest Neighbors -----------------------
# Carregando um shapefile:
shp_sc <- readOGR(dsn = "shapefile_sc",
layer = "sc_state",
encoding = "UTF-8",
use_iconv = TRUE)
# Para a abordagem, o primeiro passo é a criação de um objeto do tipo lista
# que contenha os outputs da função knearneigh.
lista_knear <- knearneigh(coordinates(shp_sc),
longlat = TRUE,
k = 3)
# Depois, esse objeto do tipo lista pode ser transformado em um objeto que
# contenha as vizinhanças calculas:
vizinhos_knear <- knn2nb(knn = lista_knear)
# Informações relevantes sobre a vizinhança estabelecida:
vizinhos_knear
# Visualizando a vizinhança estabelecida:
plot.new()
plot(shp_sc, border = "lightgray")
plot(vizinhos_knear,
coordinates(shp_sc),
add = TRUE,
col = "#13306DFF")
# A matriz W pode ser extraída da seguinte forma:
matrizW_knear  <- nb2mat(neighbours = vizinhos_knear,
style = "B")
# Para facilitar o estudo da nossa matriz W, podemos comandar:
colnames(matrizW_knear) <- shp_sc@data$NM_MUNICIP
rownames(matrizW_knear) <- shp_sc@data$NM_MUNICIP
View(matrizW_knear)
# 04) Vizinhanças Ponderadas por Distâncias Sociais -----------------------
# Carregando uma base de dados:
load("dados_sp.RData")
# Juntando a base de dados ao shapefile do Estado de SP:
shp_sp@data %>%
rename(codigo = 2) %>%
mutate(codigo = as.numeric(codigo)) %>%
left_join(dados_sp, by = "codigo") -> shp_sp@data
# Verificando o join:
shp_sp@data %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 16)
# Para que possamos traçar as distâncias sociais, assumindo como métrica de
# distância social o PIB per capita das cidades de SP, devemos estipular uma
# distância de corte di(k). Para o caso, propomos como cut-off a variação de
# 0.01 desvio-padrão.
# Desta forma, apenas para facilitar o cálculo, vamos padronizar a variável pib
# pelo procedimento zscores:
shp_sp@data["Zpib"] <- scale(shp_sp@data$pib)
summary(shp_sp@data)
mean(shp_sp@data$Zpib)
# A matriz de distâncias sociais pode ser obtida da seguinte maneira:
matrizW_distsocial <- distancia_social(x = shp_sp@data$Zpib,
dmin = 0,
dmax = 0.01,
style = "B")
# Para facilitar o estudo da nossa matriz W, podemos comandar:
colnames(matrizW_distsocial) <- shp_sp@data$NM_MUNICIP
rownames(matrizW_distsocial) <- shp_sp@data$NM_MUNICIP
View(matrizW_distsocial)
# A vizinhança pode ser calculada da seguinte forma:
vizinhos_distsocial <- mat2listw(x = matrizW_distsocial)
# Visualizando a vizinhança estabelecida:
plot.new()
plot(shp_sp, border = "lightgray")
plot(vizinhos_distsocial,
coordinates(shp_sp),
add = TRUE,
col = "#FDE725FF")
# Padronização de Matrizes Espaciais --------------------------------------
# 01) Padronização em Linha da Matriz W -----------------------------------
# Utilizaremos o objeto vizinhos_queen:
vizinhos_queen
# A matriz binária W de pesos espaciais do objeto vizinhos_queen está no objeto
# matrizW_queen.
# Para a definição da matriz W padronizada em linha:
matrizW_queen_linha <- nb2mat(vizinhos_queen,
style = "W",
zero.policy = TRUE)
# Para uma melhor visualização do novo objeto matrizW_queen_linha:
colnames(matrizW_queen_linha) <- rownames(matrizW_queen_linha)
View(matrizW_queen_linha)
# 02) Dupla Padronização da Matriz W --------------------------------------
# Para a definição da matriz W duplamente padronizada:
matrizW_queen_dupla_padr <- nb2mat(vizinhos_queen,
style = "U",
zero.policy = TRUE)
# Para uma melhor visualização do novo objeto matrizW_queen_dupla_padr:
colnames(matrizW_queen_dupla_padr) <- rownames(matrizW_queen_dupla_padr)
View(matrizW_queen_dupla_padr)
# 03) Padronização da Matriz W pela Estabilização da Variância ------------
# Para a definição da matriz W duplamente padronizada:
matrizW_queen_est_var <- nb2mat(vizinhos_queen,
style = "S",
zero.policy = TRUE)
# Para uma melhor visualização do novo objeto matrizW_queen_est_var:
colnames(matrizW_queen_est_var) <- rownames(matrizW_queen_est_var)
View(matrizW_queen_est_var)
# Técnicas para Verificação da Autocorrelação Espacial --------------------
# Antes de dar prosseguimento aos estudos das autocorrelações espaciais sobre
# a variável IDH, vamos observar alguns comportamentos:
tm_shape(shp = shp_sp) +
tm_fill(col = "idh", style = "quantile", n = 5, palette = "-magma") +
tm_borders()
# 01) Autocorrelação Global – a Estatística I de Moran --------------------
# Para o cálculo da Estatística I de Moran, nosso algoritmo esperará como
# declaração um objeto de classe listw. Como exemplificação, voltaremos a
# utilizar o objeto matrizW_queen:
listw_queen <- mat2listw(matrizW_queen)
class(listw_queen)
# Após isso, poderemos utilizar a função
moran.test(x = shp_sp@data$idh,
listw = listw_queen,
zero.policy = TRUE)
# 02) O Diagrama da Estatística I de Moran --------------------------------
moran.plot(x = shp_sp@data$idh,
listw = listw_queen,
zero.policy = TRUE,
xlab = "IDH",
ylab = "IDH Espacialmente Defasado",
pch = 19)
# Seguindo o proposto por Anselin (1995), devemos padronizar em linha nossa
# matriz de pesos espaciais W:
matrizW_queen_linha <- nb2mat(vizinhos_queen,
style = "W",
zero.policy = TRUE)
listw_queen <- mat2listw(matrizW_queen_linha)
# Considerando a variável idh do objeto SP.dados, podemos aferir sua Estatística
# Moran Local, com o uso da função localmoran(), como se segue:
moran_local <- localmoran(x = shp_sp@data$idh,
listw = listw_queen,
zero.policy = TRUE)
